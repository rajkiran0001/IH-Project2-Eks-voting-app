name: CD Pipeline

on:
  push:
    branches: ["main"]

jobs:
  deploy-to-cluster:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-south-2

      - name: Configure kubectl
        run: |
          aws eks --region eu-south-2 update-kubeconfig --name voting-cluster-sec

      - name: Deploy Kubernetes manifests
        run: |
          kubectl apply -f redis-deployment.yaml
          kubectl apply -f postgres-deployment.yaml
          kubectl apply -f worker-deployment.yaml
          kubectl apply -f vote-deployment.yaml
          kubectl apply -f result-deployment.yaml
          kubectl apply -f ingress-deployment.yaml      

      # find a way to delete existing images so it can get the new ones without the cached ones
      - name: Update deployments with new image
        run: |
          kubectl set image deployment/vote-deployment vote-container=${{ secrets.DOCKERHUB_USERNAME }}/voting-app-eks-vote:${{ github.sha }}
          kubectl set image deployment/result-deployment result-container=${{ secrets.DOCKERHUB_USERNAME }}/voting-app-eks-result:${{ github.sha }}
          kubectl set image deployment/worker-deployment worker-container=${{ secrets.DOCKERHUB_USERNAME }}/voting-app-eks-worker:${{ github.sha }}

          # Wait for deployments to be ready
          kubectl rollout status deployment/redis-deployment
          kubectl rollout status deployment/postgres-deployment
          kubectl rollout status deployment/worker-deployment
          kubectl rollout status deployment/vote-deployment
          kubectl rollout status deployment/result-deployment

          # Confirm pods
          kubectl get pods -o wide
